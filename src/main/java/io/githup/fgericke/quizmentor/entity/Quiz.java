package io.githup.fgericke.quizmentor.entity;

import io.githup.fgericke.quizmentor.entity.generic.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Enumerated;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import java.util.LinkedHashSet;
import java.util.Set;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.ToString.Exclude;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;
import org.hibernate.type.SqlTypes;

/**
 * This is an entity class that represents a Quiz. It extends the BaseEntity class and includes
 * additional fields specific to a Quiz. It is annotated with @Entity, indicating that it is a JPA
 * entity. Lombok annotations are used to automatically generate getters, setters, toString,
 * builder, and constructors.
 */
@Entity
@Getter
@Setter
@ToString
@Builder
@Table(name = "quiz")
@SQLDelete(sql = "UPDATE quiz SET deleted_at = current_date WHERE id=?")
@Where(clause = "deleted_at IS NULL")
@AllArgsConstructor
@NoArgsConstructor
public class Quiz extends BaseEntity {

  /**
   * The title of the quiz. It is a unique field and cannot be null.
   */
  @Column(name = "title", nullable = false, unique = true)
  private String title;

  /**
   * The description of the quiz.
   */
  @Column(name = "description")
  @JdbcTypeCode(SqlTypes.LONGVARCHAR)
  private String description;

  /**
   * The visibility status of the quiz. It cannot be null and is represented as an enumeration.
   */
  @Enumerated
  @Builder.Default
  @Column(name = "visibility", nullable = false)
  private Visibility visibility = Visibility.DRAFT;

  /**
   * The user who created the quiz. It is a many-to-one relationship, meaning that each quiz is
   * associated with one user, but a user can create multiple quizzes. The 'user_id' column in the
   * 'quiz' table represents the foreign key to the 'user' table. The relationship is not optional,
   * meaning that every quiz must be associated with a user. The CascadeType.ALL indicates that if a
   * User entity is persisted, removed, refreshed, or detached, the same operation will be applied
   * to the Quiz entity. The @Exclude annotation is used to exclude the 'user' field from the
   * toString method generated by Lombok.
   */
  @Exclude
  @ManyToOne(cascade = CascadeType.ALL, optional = false)
  @JoinColumn(name = "user_id", nullable = false)
  private User user;

  /**
   * The categories that the quiz belongs to. It is a many-to-many relationship, meaning that each
   * quiz can belong to multiple categories, and each category can have multiple quizzes. The
   * 'quizze' in mappedBy indicates that the 'quizze' field in the Category entity owns the
   * relationship (contains the foreign key). The CascadeType.PERSIST, CascadeType.MERGE,
   * CascadeType.REFRESH, CascadeType.DETACH indicates that if a Quiz entity is persisted, merged,
   * refreshed, or detached, the same operation will be applied to the Category entity. The
   *
   * @Builder.Default annotation is used to initialize the 'categories' field with an empty set of
   * Category.
   */
  @Builder.Default
  @ManyToMany(mappedBy = "quizze", cascade = {CascadeType.PERSIST, CascadeType.MERGE,
      CascadeType.REFRESH, CascadeType.DETACH})
  private Set<Category> categories = new LinkedHashSet<>();

  /**
   * The questions that belong to this quiz. It is a many-to-many relationship, meaning that each
   * quiz can have multiple questions, and each question can belong to multiple quizzes. The
   * 'questions' in mappedBy indicates that the 'questions' field in the Question entity owns the
   * relationship (contains the foreign key). The CascadeType.PERSIST, CascadeType.MERGE,
   * CascadeType.REFRESH, CascadeType.DETACH indicates that if a Quiz entity is persisted, merged,
   * refreshed, or detached, the same operation will be applied to the Question entity. The
   * @Builder.Default annotation is used to initialize the 'questions' field with an empty set of
   * Question.
   */
  @Exclude
  @Builder.Default
  @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH,
      CascadeType.DETACH})
  @JoinTable(name = "quiz_questions",
      joinColumns = @JoinColumn(name = "quiz_id"),
      inverseJoinColumns = @JoinColumn(name = "questions_id"))
  private Set<Question> questions = new LinkedHashSet<>();
}
